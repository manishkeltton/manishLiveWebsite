{"ast":null,"code":"const KEYS = {\n  employees: 'employees',\n  employeeId: 'employeeId'\n};\nexport const getDepartmentCollection = () => [{\n  id: '1',\n  title: 'Development'\n}, {\n  id: '2',\n  title: 'Marketing'\n}, {\n  id: '3',\n  title: 'Accounting'\n}, {\n  id: '4',\n  title: 'HR'\n}];\nexport function insertEmployee(data) {\n  let employees = getAllEmployees();\n  data['id'] = generateEmployeeId();\n  employees.push(data);\n  localStorage.setItem(KEYS.employees, JSON.stringify(employees));\n}\nexport function updateEmployee(data) {\n  let employee = getAllEmployees();\n  let recordIndex = employees.findIndex(x => x.id == data.id);\n  employees[recordIndex] = { ...data\n  };\n  localStorage.setItem(KEYS.em);\n}\nexport function generateEmployeeId() {\n  if (localStorage.getItem(KEYS.employeeId) == null) localStorage.setItem(KEYS.employeeId, '0');\n  var id = parseInt(localStorage.getItem(KEYS.employeeId));\n  localStorage.setItem(KEYS.employeeId, (++id).toString());\n  return id;\n}\nexport function getAllEmployees() {\n  if (localStorage.getItem(KEYS.employees) == null) localStorage.setItem(KEYS.employees, JSON.stringify([]));\n  let employees = JSON.parse(localStorage.getItem(KEYS.employees));\n  let departments = getDepartmentCollection(); //This will return updated list of employee with the new property deparment.\n\n  return employees.map(x => ({ ...x,\n    department: departments[x.departmentId - 1].title\n  }));\n}","map":{"version":3,"sources":["/var/www/html/complete_mui_system/src/services/employeeService.js"],"names":["KEYS","employees","employeeId","getDepartmentCollection","id","title","insertEmployee","data","getAllEmployees","generateEmployeeId","push","localStorage","setItem","JSON","stringify","updateEmployee","employee","recordIndex","findIndex","x","em","getItem","parseInt","toString","parse","departments","map","department","departmentId"],"mappings":"AAAA,MAAMA,IAAI,GAAG;AACTC,EAAAA,SAAS,EAAC,WADD;AAETC,EAAAA,UAAU,EAAC;AAFF,CAAb;AAKA,OAAO,MAAMC,uBAAuB,GAAG,MAAM,CACzC;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE;AAAlB,CADyC,EAEzC;AAAED,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE;AAAlB,CAFyC,EAGzC;AAAED,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE;AAAlB,CAHyC,EAIzC;AAACD,EAAAA,EAAE,EAAE,GAAL;AAAUC,EAAAA,KAAK,EAAE;AAAjB,CAJyC,CAAtC;AAOP,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AACjC,MAAIN,SAAS,GAACO,eAAe,EAA7B;AACAD,EAAAA,IAAI,CAAC,IAAD,CAAJ,GAAaE,kBAAkB,EAA/B;AACAR,EAAAA,SAAS,CAACS,IAAV,CAAeH,IAAf;AACAI,EAAAA,YAAY,CAACC,OAAb,CAAqBZ,IAAI,CAACC,SAA1B,EAAqCY,IAAI,CAACC,SAAL,CAAeb,SAAf,CAArC;AACH;AAED,OAAO,SAASc,cAAT,CAAwBR,IAAxB,EAA8B;AACjC,MAAIS,QAAQ,GAAGR,eAAe,EAA9B;AACA,MAAIS,WAAW,GAAGhB,SAAS,CAACiB,SAAV,CAAoBC,CAAC,IAAIA,CAAC,CAACf,EAAF,IAAQG,IAAI,CAACH,EAAtC,CAAlB;AACAH,EAAAA,SAAS,CAACgB,WAAD,CAAT,GAAyB,EAAE,GAAGV;AAAL,GAAzB;AACAI,EAAAA,YAAY,CAACC,OAAb,CAAqBZ,IAAI,CAACoB,EAA1B;AACH;AAED,OAAO,SAASX,kBAAT,GAA6B;AAChC,MAAIE,YAAY,CAACU,OAAb,CAAqBrB,IAAI,CAACE,UAA1B,KAAyC,IAA7C,EACIS,YAAY,CAACC,OAAb,CAAqBZ,IAAI,CAACE,UAA1B,EAAsC,GAAtC;AACJ,MAAIE,EAAE,GAAGkB,QAAQ,CAACX,YAAY,CAACU,OAAb,CAAqBrB,IAAI,CAACE,UAA1B,CAAD,CAAjB;AACAS,EAAAA,YAAY,CAACC,OAAb,CAAqBZ,IAAI,CAACE,UAA1B,EAAsC,CAAC,EAAEE,EAAH,EAAOmB,QAAP,EAAtC;AACA,SAAOnB,EAAP;AACH;AAED,OAAO,SAASI,eAAT,GAA2B;AAC9B,MAAIG,YAAY,CAACU,OAAb,CAAqBrB,IAAI,CAACC,SAA1B,KAAwC,IAA5C,EACIU,YAAY,CAACC,OAAb,CAAqBZ,IAAI,CAACC,SAA1B,EAAqCY,IAAI,CAACC,SAAL,CAAe,EAAf,CAArC;AACJ,MAAIb,SAAS,GAAGY,IAAI,CAACW,KAAL,CAAWb,YAAY,CAACU,OAAb,CAAqBrB,IAAI,CAACC,SAA1B,CAAX,CAAhB;AACA,MAAIwB,WAAW,GAAGtB,uBAAuB,EAAzC,CAJ8B,CAK9B;;AACA,SAAOF,SAAS,CAACyB,GAAV,CAAcP,CAAC,KAAK,EACvB,GAAGA,CADoB;AAEvBQ,IAAAA,UAAU,EAAGF,WAAW,CAACN,CAAC,CAACS,YAAF,GAAe,CAAhB,CAAX,CAA8BvB;AAFpB,GAAL,CAAf,CAAP;AAIH","sourcesContent":["const KEYS = {\n    employees:'employees',\n    employeeId:'employeeId'\n}\n\nexport const getDepartmentCollection = () =>([\n    { id: '1', title: 'Development' },\n    { id: '2', title: 'Marketing' },\n    { id: '3', title: 'Accounting' },\n    {id: '4', title: 'HR'},\n])\n\nexport function insertEmployee(data) {\n    let employees=getAllEmployees();\n    data['id'] = generateEmployeeId()\n    employees.push(data)\n    localStorage.setItem(KEYS.employees, JSON.stringify(employees))\n}\n\nexport function updateEmployee(data) {\n    let employee = getAllEmployees();\n    let recordIndex = employees.findIndex(x => x.id == data.id);\n    employees[recordIndex] = { ...data }\n    localStorage.setItem(KEYS.em)\n}\n\nexport function generateEmployeeId(){\n    if (localStorage.getItem(KEYS.employeeId) == null)\n        localStorage.setItem(KEYS.employeeId, '0')\n    var id = parseInt(localStorage.getItem(KEYS.employeeId))\n    localStorage.setItem(KEYS.employeeId, (++id).toString())\n    return id;\n}\n\nexport function getAllEmployees() {\n    if (localStorage.getItem(KEYS.employees) == null)\n        localStorage.setItem(KEYS.employees, JSON.stringify([]))\n    let employees = JSON.parse(localStorage.getItem(KEYS.employees));\n    let departments = getDepartmentCollection();\n    //This will return updated list of employee with the new property deparment.\n    return employees.map(x => ({\n        ...x,\n        department : departments[x.departmentId-1].title\n    }))\n}"]},"metadata":{},"sourceType":"module"}